package com.finalproject.controller;

import com.finalproject.model.Member;
import com.finalproject.model.MemberTrip;
import com.finalproject.model.Payment;
import com.finalproject.model.Trip;
import com.finalproject.repository.*;
import com.finalproject.service.MemberService;
import com.finalproject.service.TripService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

@RestController
@RequestMapping("/trips")
public class TripController {

    @Autowired
    private TripService tripService;
    @Autowired
    private MemberService memberService;
    @Autowired
    private PaymentRepository paymentRepository;
    @Autowired
    private MemberTripRepository memberTripRepository;
    @Autowired
    private TripRepository tripRepository;

    @Autowired
    private MemberTripActivityRepository memberTripActivityRepository;

    @Autowired
    private ActivityRepository activityRepository;

    private final String uploadDir = "C:/Users/HP/eclipse-workspace/FinalProject/src/main/java/com/finalproject/assets/"; // üìÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì


//    // Get all trips
//    @GetMapping
//    public ResponseEntity<List<Trip>> getAllTrips() {
//        try {
//            List<Trip> trips = tripService.getAllTrips();
//            return new ResponseEntity<>(trips, HttpStatus.OK);
//        } catch (Exception e) {
//            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
//        }
//    }

    // Get trip by ID
    @GetMapping("/{id}")
    public ResponseEntity<Trip> getTripDetail(@PathVariable("id") Integer id) {
        try {
            Trip trip = tripService.getTripById(id);
            if (trip != null) {
                return new ResponseEntity<>(trip, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping(value = "/create", consumes = {"multipart/form-data"})
    public ResponseEntity<?> doCreateTrip(
            @RequestParam("tripName") String tripName,
            @RequestParam("startDate") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate startDate,
            @RequestParam("dueDate")   @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dueDate,
            @RequestParam("budget") Double budget,
            @RequestParam("tripDetail") String tripDetail,
            @RequestParam("location") String location,
            @RequestParam("tripStatus") String tripStatus,
            @RequestParam("image") MultipartFile file,
            @RequestParam("memberName") String memberName
    ) {
        try {
            // ‡πÄ‡∏ã‡∏ü‡∏£‡∏π‡∏õ
            // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ tripId)
            String originalName = StringUtils.cleanPath(file.getOriginalFilename());
            String ext = (originalName != null && originalName.contains(".")) ?
                    originalName.substring(originalName.lastIndexOf('.')) : "";
            String fileName = "trip_" + System.currentTimeMillis() + ext;

            // 4) ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå
            File uploadFolder = new File(uploadDir);
            if (!uploadFolder.exists()) uploadFolder.mkdirs();
            File saveFile = new File(uploadDir + fileName);
            saveFile.getParentFile().mkdirs();
            try (FileOutputStream fout = new FileOutputStream(saveFile)) {
                fout.write(file.getBytes());
            }

            // LocalDate -> Date (‡πÄ‡∏ß‡∏•‡∏≤ 00:00)
            ZoneId zone = ZoneId.of("Asia/Bangkok"); // ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            Instant startInstant = startDate.atTime(12, 0).atZone(zone).toInstant();
            Instant dueInstant   = dueDate.atTime(12, 0).atZone(zone).toInstant();

            Date startAsDate = Date.from(startInstant);
            Date dueAsDate   = Date.from(dueInstant);


            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Trip
            Trip trip = new Trip();
            trip.setTripName(tripName);
            trip.setStartDate(startAsDate);
            trip.setDueDate(dueAsDate);
            trip.setBudget(budget);
            trip.setTripDetail(tripDetail);
            trip.setLocation(location);
            trip.setTripStatus(tripStatus);
            trip.setImage(fileName);

            // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (owner)
            Member owner = memberService.getMemberByEmail(memberName);
            if (owner == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å " + memberName, HttpStatus.NOT_FOUND);
            }

            // ‡∏ó‡∏≥ MemberTrip (owner) + Payment ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
            MemberTrip memberTrip = new MemberTrip();
            memberTrip.setTrip(trip);
            memberTrip.setParticipant(owner);
            memberTrip.setDateJoin(new Date());
            memberTrip.setMemberTripStatus("owner");

            Payment payment = new Payment();
            payment.setPrice(budget);
            payment.setPaymentStatus("Correct");
            payment.setPaymentDetail("‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°");
            payment.setDatetimePayment(new Date());
            payment.setMembertrip(memberTrip);
            memberTrip.getPayments().add(payment);

            trip.getMemberTrips().add(memberTrip);

            Trip savedTrip = tripService.createTrip(trip);

            // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏£‡∏¥‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ invite

            // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô createTripWithImage ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å savedTrip ‡πÅ‡∏•‡πâ‡∏ß
            String ownerEmail = memberName;
            Integer currentTripId = savedTrip.getTripId();

// ‡∏´‡∏≤ "‡∏ó‡∏£‡∏¥‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤" ‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô owner ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏£‡∏¥‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            Optional<Trip> previousTripOpt =
                    tripRepository.findTopByMemberTrips_Participant_EmailIgnoreCaseAndMemberTrips_MemberTripStatusIgnoreCaseAndTripIdNotOrderByTripIdDesc(
                            ownerEmail, "owner", currentTripId
                    );

            List<Map<String,Object>> previousMembers = new ArrayList<>();
            if (previousTripOpt.isPresent()) {
                Trip prev = previousTripOpt.get();

                // ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà "‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" (‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏≠‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
                List<String> statuses = List.of("invited", "participant"); // <- ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á
                List<MemberTrip> mts = memberTripRepository.findMembersForSuggestion(prev.getTripId(), statuses);

                // map ‡πÄ‡∏õ‡πá‡∏ô payload ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                for (MemberTrip mt : mts) {
                    if (mt.getParticipant() == null) continue;
                    Member m = mt.getParticipant();

                    // ‡∏ï‡∏±‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏¥‡πâ‡∏á
                    if (m.getEmail() == null || m.getEmail().equalsIgnoreCase(ownerEmail)) continue;

                    Map<String, Object> simpleMember = new HashMap<>();
                    simpleMember.put("email", m.getEmail());
                    simpleMember.put("username", m.getUsername());
                    simpleMember.put("firstName", m.getFirstName());
                    simpleMember.put("lastName", m.getLastName());
                    // ‡∏™‡πà‡∏á‡∏Ñ‡∏µ‡∏¢‡πå "memberImage" ‡πÄ‡∏õ‡πá‡∏ô camelCase ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ
                    simpleMember.put("memberImage", m.getMember_image());
                    System.out.println("üì§ [DEBUG] Sending memberImage in response: " + m.getMember_image());

                    Map<String, Object> info = new HashMap<>();
                    info.put("member", simpleMember);
                    // ‡πÅ‡∏Ñ‡πà "‡πÄ‡∏™‡∏ô‡∏≠‡∏ä‡∏∑‡πà‡∏≠" ‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà -> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏¥‡∏ç
                    info.put("status", false);

                    previousMembers.add(info);
                }
            }

            Map<String,Object> response = new HashMap<>();
            response.put("status", "success");
            response.put("message", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            response.put("tripId", currentTripId);
            response.put("lastTripMembers", previousMembers);

            return new ResponseEntity<>(response, HttpStatus.CREATED);


        } catch (IOException e) {
            return new ResponseEntity<>("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", HttpStatus.INTERNAL_SERVER_ERROR);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏î‡πâ: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @PutMapping(value = "/update", consumes = {"multipart/form-data"})
    @Transactional
    public ResponseEntity<?> doEditTrip(
            @RequestParam("tripId") Integer tripId,
            @RequestParam("tripName") String tripName,
            @RequestParam("startDate") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate startDate,
            @RequestParam("dueDate")   @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dueDate,
            @RequestParam("budget") Double budget,
            @RequestParam("tripDetail") String tripDetail,
            @RequestParam("location") String location,
            @RequestParam("tripStatus") String tripStatus,
            @RequestParam(value = "image", required = false) MultipartFile imageFile
    ) {
        try {
            Trip existingTrip = tripService.getTripById(tripId);
            if (existingTrip == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏£‡∏¥‡∏õ", HttpStatus.NOT_FOUND);
            }

            // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏ä‡πá‡∏Ñ participant ‡πÄ‡∏û‡∏∑‡πà‡∏≠ lock budget)
            List<MemberTrip> allMemberTrips = memberTripRepository.findByTrip_TripId(tripId);
            if (allMemberTrips == null) allMemberTrips = Collections.emptyList();

            Optional<MemberTrip> ownerOpt = allMemberTrips.stream()
                    .filter(mt -> mt != null && "owner".equalsIgnoreCase(mt.getMemberTripStatus()))
                    .findFirst();
            if (ownerOpt.isEmpty()) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏¥‡∏õ (owner) ‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ", HttpStatus.BAD_REQUEST);
            }
            MemberTrip ownerMt = ownerOpt.get();

            boolean hasParticipant = allMemberTrips.stream()
                    .anyMatch(mt -> mt != null && "participant".equalsIgnoreCase(mt.getMemberTripStatus()));

            boolean wantChangeBudget = !Objects.equals(existingTrip.getBudget(), budget);
            if (hasParticipant && wantChangeBudget) {
                return new ResponseEntity<>(
                        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° (participant) ‡πÅ‡∏•‡πâ‡∏ß",
                        HttpStatus.BAD_REQUEST
                );
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

            ZoneId zone = ZoneId.of("Asia/Bangkok");
            Date startAsDate = Date.from(startDate.atTime(12, 0).atZone(zone).toInstant());
            Date dueAsDate   = Date.from(dueDate.atTime(12, 0).atZone(zone).toInstant());
            existingTrip.setTripName(tripName);
            existingTrip.setStartDate(startAsDate);
            existingTrip.setDueDate(dueAsDate);
            existingTrip.setTripDetail(tripDetail);
            existingTrip.setLocation(location);
            existingTrip.setTripStatus(tripStatus);

            String oldImageName = existingTrip.getImage(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            String newImageName = null;

            if (imageFile != null && !imageFile.isEmpty()) {
                String originalName = StringUtils.cleanPath(imageFile.getOriginalFilename());
                String ext = (originalName != null && originalName.contains(".")) ?
                        originalName.substring(originalName.lastIndexOf('.')) : "";
                // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠
                newImageName = "trip_" + existingTrip.getTripId() + "_" + System.currentTimeMillis() + ext;

                // ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
                File uploadFolder = new File(uploadDir);
                if (!uploadFolder.exists()) uploadFolder.mkdirs();
                File saveFile = new File(uploadDir + newImageName);
                saveFile.getParentFile().mkdirs();
                try (FileOutputStream fout = new FileOutputStream(saveFile)) {
                    fout.write(imageFile.getBytes());
                }

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ image ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                existingTrip.setImage(newImageName);
            }
            if (!hasParticipant) {
                existingTrip.setBudget(budget);
            }

            Trip updatedTrip = tripService.updateTrip(existingTrip);

            if (newImageName != null && oldImageName != null && !oldImageName.isBlank()) {
                try {
                    java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get(uploadDir + oldImageName));
                } catch (IOException ex) {
                    // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ fail ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Äî log/ignore
                    System.err.println("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + ex.getMessage());
                }
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï/‡∏™‡∏£‡πâ‡∏≤‡∏á payment ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á owner ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ participant
            if (!hasParticipant) {
                Optional<Payment> joinFeeOpt =
                        paymentRepository.findFirstByMembertrip_MemberTripIdAndPaymentDetail(
                                ownerMt.getMemberTripId(), "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"
                        );

                Payment joinFee = joinFeeOpt.orElseGet(Payment::new);
                joinFee.setMembertrip(ownerMt);
                joinFee.setPaymentDetail("‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°");
                joinFee.setPrice(budget);
                if (joinFee.getPaymentStatus() == null || joinFee.getPaymentStatus().isEmpty()) {
                    joinFee.setPaymentStatus("Correct");
                }
                joinFee.setDatetimePayment(new Date());
                paymentRepository.save(joinFee);
            }

            Map<String, Object> response = new HashMap<>();
            response.put("status", "ok");
            response.put("message", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            response.put("tripId", updatedTrip.getTripId());
            response.put("budgetLocked", hasParticipant);

            return new ResponseEntity<>(response, HttpStatus.OK);

        } catch (IOException e) {
            return new ResponseEntity<>("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", HttpStatus.INTERNAL_SERVER_ERROR);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
        }
    // Delete trip by ID
    @DeleteMapping("/{id}")
    @Transactional
    public ResponseEntity<?> doRemoveTrip(@PathVariable("id") Integer tripId) {
        try {
            // 0) ‡∏´‡∏≤ Trip
            Trip trip = tripRepository.findById(tripId).orElse(null);
            if (trip == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(Map.of("status", "not_found", "message", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏£‡∏¥‡∏õ"));
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°/‡∏£‡∏µ‡∏ü‡∏±‡∏ô)
            final String status = trip.getTripStatus() == null ? "" : trip.getTripStatus().trim();
            final boolean isEndedTrip = "‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î".equalsIgnoreCase(status);

            // 1) ‡πÄ‡∏ä‡πá‡∏Ñ‡∏°‡∏µ participant ‡πÑ‡∏´‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏¥‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            if (!isEndedTrip) {
                List<MemberTrip> memberTrips = memberTripRepository.findByTrip_TripId(tripId);
                boolean hasAnyParticipant = memberTrips != null && memberTrips.stream()
                        .anyMatch(mt -> mt != null && "participant".equalsIgnoreCase(mt.getMemberTripStatus()));
                if (hasAnyParticipant) {
                    return ResponseEntity.status(HttpStatus.CONFLICT)
                            .body(Map.of("status", "need_refund",
                                    "message", "‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö",
                                    "tripId", tripId));
                }
            }

            // 2) ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (Trip/Activity/Payment)
            List<String> activityImages = activityRepository.findActivityImagesByTripId(tripId);
            List<String> paymentSlips  = paymentRepository.findPaymentSlipsByTripId(tripId);
            String tripImage           = trip.getImage(); // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null/‡∏ß‡πà‡∏≤‡∏á

            // 3) ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            memberTripActivityRepository.deleteAllByTripId(tripId);       // mta
            paymentRepository.deleteAllByTripId(tripId);                  // payments

            // ‡∏´‡∏≤ activity ids ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö activity ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î
            List<Integer> activityIds = activityRepository.findActivityIdsByTripId(tripId);
            if (activityIds != null && !activityIds.isEmpty()) {
                activityRepository.deleteByIds(activityIds);              // activities
            }

            memberTripRepository.deleteByTrip_TripId(tripId);             // member_trip mapping
            tripRepository.deleteById(tripId);                            // trip

            // 4) ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏î‡∏¥‡∏™‡∏Å‡πå
            safeDeleteFile(tripImage);
            if (activityImages != null) {
                activityImages.forEach(this::safeDeleteFile);
            }
            if (paymentSlips != null) {
                paymentSlips.forEach(this::safeDeleteFile);
            }

            return ResponseEntity.ok(
                    Map.of("status", "deleted", "message", "‡∏•‡∏ö‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "tripId", tripId)
            );
        } catch (Exception e) {
            return new ResponseEntity<>("‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }

    }

    /** ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ */
    private void safeDeleteFile(String filename) {
        try {
            if (filename == null || filename.isBlank()) return;
            File f = new File(uploadDir + filename);
            if (f.exists() && f.isFile()) {
                if (!f.delete()) {
                    System.out.println("‚ö†Ô∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + f.getAbsolutePath());
                }
            }
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + e.getMessage());
        }
    }

    @GetMapping("/check-join/{memberTripId}")
    public ResponseEntity<?> getPaymentJoin(@PathVariable Integer memberTripId) {

        MemberTrip mt = memberTripRepository.findById(memberTripId)
                .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö MemberTrip ID: " + memberTripId));

        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ paymentDetail = "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"
        List<Payment> onlyJoinPayment = mt.getPayments().stream()
                .filter(p -> "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°".equalsIgnoreCase(p.getPaymentDetail()))
                .toList();

        // set ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà payment ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        mt.setPayments(onlyJoinPayment);

        return ResponseEntity.ok(mt);
    }

}
