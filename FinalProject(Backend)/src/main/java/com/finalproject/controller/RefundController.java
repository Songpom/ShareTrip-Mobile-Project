package com.finalproject.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.finalproject.dto.ActivitySummaryDTO;
import com.finalproject.dto.MemberTripBalanceDTO;
import com.finalproject.dto.TripSummaryDTO;
import com.finalproject.model.*;
import com.finalproject.repository.MemberTripActivityRepository;
import com.finalproject.repository.MemberTripRepository;
import com.finalproject.repository.PaymentRepository;
import com.finalproject.repository.TripRepository;
import com.github.pheerathach.ThaiQRPromptPay;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;

@RestController
@RequestMapping("/refund")
public class RefundController {
    @Autowired
    private MemberTripRepository memberTripRepository;

    @Autowired
    private MemberTripActivityRepository memberTripActivityRepository;

    @Autowired
    private TripRepository tripRepository;

    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private CheckSlipController checkSlip;

    private final String uploadDir = "C:/Users/HP/eclipse-workspace/FinalProject/src/main/java/com/finalproject/assets/"; // üìÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì

    private static final long WINDOW_MINUTES = 15L; // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏ô‡∏∏‡πÇ‡∏•‡∏°‡∏à‡∏£‡∏¥‡∏á
    private static final long SKEW_MINUTES   = 5L;  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ clock skew ‡πÅ‡∏Ñ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (2‚Äì5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    private static final ZoneId ZONE_TH = ZoneId.of("Asia/Bangkok");




    public RefundController(MemberTripRepository memberTripRepository,
                            MemberTripActivityRepository memberTripActivityRepository,
                            TripRepository tripRepository) {
        this.memberTripRepository = memberTripRepository;
        this.memberTripActivityRepository = memberTripActivityRepository;
        this.tripRepository = tripRepository;
    }

    @Transactional
    @GetMapping("/listrefundmember/{tripId}")
    @ResponseBody
    public TripSummaryDTO listRefundMember(@PathVariable Integer tripId) {
        if (tripId == null) {
            throw new IllegalArgumentException("tripId ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null");
        }

        Trip trip = tripRepository.findById(tripId)
                .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: " + tripId));

        List<String> statuses = Arrays.asList("participant", "owner");
        List<MemberTrip> memberTrips = memberTripRepository
                .findByTrip_TripIdAndMemberTripStatusInWithPayments(tripId, statuses);

        if (memberTrips == null || memberTrips.isEmpty()) {
            throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö MemberTrip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Trip ID: " + tripId);
        }

        // ‡∏´‡∏≤ email ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ (owner)
        String emailOwner = memberTrips.stream()
                .filter(mt -> "owner".equalsIgnoreCase(mt.getMemberTripStatus()) && mt.getParticipant() != null)
                .map(mt -> mt.getParticipant().getEmail())
                .findFirst()
                .orElse(null);

        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        List<MemberTripBalanceDTO> balances = new ArrayList<>();
        for (MemberTrip mt : memberTrips) {
            try {
                balances.add(validateExpend(mt));
            } catch (Exception ex) {
                // ‡∏Å‡∏±‡∏ô‡∏•‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                balances.add(new MemberTripBalanceDTO(
                        null, null, 0.0, 0.0, 0.0, new ArrayList<>()
                ));
            }
        }

        // ====== ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏£‡∏¥‡∏õ ======
        if (emailOwner != null) {
            final double EPS = 0.009;

            double sumAllBalances = balances.stream()
                    .mapToDouble(MemberTripBalanceDTO::getBalance)
                    .sum();

            double ownerBalance = balances.stream()
                    .filter(b -> b.getMember() != null
                            && b.getMember().getEmail() != null
                            && b.getMember().getEmail().equals(emailOwner))
                    .mapToDouble(MemberTripBalanceDTO::getBalance)
                    .findFirst()
                    .orElse(0.0);

            double othersSum = sumAllBalances - ownerBalance; // ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ

            if (Math.abs(othersSum) <= EPS) {
                if (!"‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î".equals(trip.getTripStatus())) {
                    trip.setTripStatus("‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
                    tripRepository.save(trip);
                }
            }
        }
        // ================================================

        return new TripSummaryDTO(
                trip.getTripId(),
                trip.getTripName(),
                trip.getTripDetail(),
                emailOwner,
                balances
        );
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1 ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ:
     * - totalPayment: ‡∏£‡∏ß‡∏° Payment ‡∏ó‡∏µ‡πà status = "Correct"
     * - totalPricePerPerson: ‡∏£‡∏ß‡∏° pricePerPerson ‡∏à‡∏≤‡∏Å MemberTripActivity
     * - balance = totalPayment - totalPricePerPerson
     * - ‡πÅ‡∏ô‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏á‡πÉ‡∏ô DTO
     *
     * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏°‡∏µ validateExpend ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å endpoint ‡∏≠‡∏∑‡πà‡∏ô
     * ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≥‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
     */
    private MemberTripBalanceDTO validateExpend(MemberTrip memberTrip) {
        Integer memberTripId = memberTrip.getMemberTripId();
        Member member = memberTrip.getParticipant();

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null payments
        List<Payment> payments = (memberTrip.getPayments() != null)
                ? memberTrip.getPayments()
                : Collections.emptyList();

        double totalPayment = payments.stream()
                .filter(p -> p != null
                        && p.getPrice() != null
                        && "Correct".equalsIgnoreCase(p.getPaymentStatus()))
                .mapToDouble(Payment::getPrice)
                .sum();

        List<MemberTripActivity> activities =
                memberTripActivityRepository.findByMemberTripId(memberTripId);

        double totalPricePerPerson = (activities != null)
                ? activities.stream()
                .filter(a -> a != null && a.getPricePerPerson() != null)
                .mapToDouble(MemberTripActivity::getPricePerPerson)
                .sum()
                : 0.0;

        double balance = totalPayment - totalPricePerPerson;

        List<ActivitySummaryDTO> activityDetails = new ArrayList<>();
        if (activities != null) {
            for (MemberTripActivity mta : activities) {
                if (mta != null && mta.getActivity() != null) {
                    activityDetails.add(new ActivitySummaryDTO(
                            mta.getActivity().getActivityId(),
                            mta.getActivity().getActivityName(),
                            mta.getPricePerPerson(),
                            mta.getActivity().getActivityDateTime()
                    ));
                }
            }
        }

        return new MemberTripBalanceDTO(
                memberTripId.longValue(),
                member,
                totalPayment,
                totalPricePerPerson,
                balance,
                activityDetails
        );
    }



    @PostMapping("/refundmember/qrcode")
    @Transactional(readOnly = true)
    public ResponseEntity<?> getRefundDetail(@RequestBody Map<String, Object> request) {
        try {
            // 0) ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
            if (request == null || !request.containsKey("memberTripId")) {
                return new ResponseEntity<>("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á memberTripId", HttpStatus.BAD_REQUEST);
            }

            Integer memberTripId;
            try {
                Object mtIdRaw = request.get("memberTripId");
                memberTripId = (mtIdRaw instanceof Number)
                        ? ((Number) mtIdRaw).intValue()
                        : Integer.parseInt(String.valueOf(mtIdRaw));
            } catch (Exception ex) {
                return new ResponseEntity<>("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö memberTripId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", HttpStatus.BAD_REQUEST);
            }

            // 1) ‡∏´‡∏≤ MemberTrip
            MemberTrip memberTrip = memberTripRepository.findById(memberTripId)
                    .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MemberTrip: " + memberTripId));

            Member member = memberTrip.getParticipant();
            if (member == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á MemberTrip ‡∏ô‡∏µ‡πâ", HttpStatus.NOT_FOUND);
            }

            // 2) totalPayment (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ payment status = Correct)
            double totalPayment = 0.0;
            if (memberTrip.getPayments() != null) {
                totalPayment = memberTrip.getPayments().stream()
                        .filter(p -> p != null
                                && p.getPrice() != null
                                && "Correct".equalsIgnoreCase(p.getPaymentStatus()))
                        .mapToDouble(Payment::getPrice)
                        .sum();
            }

            // 3) totalPricePerPerson ‡∏à‡∏≤‡∏Å MemberTripActivity
            List<MemberTripActivity> activities = memberTripActivityRepository.findByMemberTripId(memberTripId);
            double totalPricePerPerson = 0.0;
            if (activities != null) {
                totalPricePerPerson = activities.stream()
                        .filter(a -> a != null && a.getPricePerPerson() != null)
                        .mapToDouble(MemberTripActivity::getPricePerPerson)
                        .sum();
            }

            // 4) balance = totalPayment - totalPricePerPerson
            double balance = totalPayment - totalPricePerPerson;

            // ‚úÖ ‡∏õ‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö Half Up (‡∏Å‡∏±‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏≥‡πÉ‡∏´‡πâ ThaiQR ‡∏•‡πà‡∏°/500)
            BigDecimal balanceRounded = BigDecimal.valueOf(balance).setScale(2, RoundingMode.HALF_UP);

            // ‡∏ñ‡πâ‡∏≤ balance <= 0 ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
            if (balanceRounded.compareTo(BigDecimal.ZERO) <= 0) {
                Map<String, Object> resp = new HashMap<>();
                resp.put("memberTripId", memberTripId);
                resp.put("amount", 0.00);
                resp.put("message", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô");
                return new ResponseEntity<>(resp, HttpStatus.OK);
            }

            // ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å DB
            String raw = memberTrip.getParticipant().getPromtpayNumber();
            String digits = raw.replaceAll("\\D", ""); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

// ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            if (!digits.matches("^\\d{13}$") && !digits.matches("^0\\d{9}$")) {
                return new ResponseEntity<>(
                        "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0XXXXXXXXX ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ 13 ‡∏´‡∏•‡∏±‡∏Å)",
                        HttpStatus.BAD_REQUEST
                );
            }
            String qrbase64;
            BigDecimal amt = BigDecimal
                    .valueOf(balance)
                    .setScale(2, RoundingMode.HALF_UP);
// ‡πÉ‡∏™‡πà‡∏û‡∏£‡πá‡∏≠‡∏Å‡∏ã‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            if (digits.matches("^\\d{13}$")) {
                ThaiQRPromptPay qr = new ThaiQRPromptPay.Builder().staticQR().creditTransfer().nationalId(digits).amount(new BigDecimal(amt.doubleValue())).build();
                qrbase64 = qr.drawToBase64(300, 300);// ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
                // ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
            } else {
                ThaiQRPromptPay qr = new ThaiQRPromptPay.Builder().staticQR().creditTransfer().mobileNumber(digits).amount(new BigDecimal(amt.doubleValue())).build();
                qrbase64 = qr.drawToBase64(300, 300);// ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
            }


            // 7) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (memberTrip ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠)
            Map<String, Object> memberLite = new HashMap<>();
            memberLite.put("email", member.getEmail());
            memberLite.put("username", member.getUsername());
            memberLite.put("member_image", member.getMember_image());
            memberLite.put("firstName", member.getFirstName());
            memberLite.put("lastName", member.getLastName());
            memberLite.put("promtpayNumber", member.getPromtpayNumber());
            memberLite.put("tel", member.getTel());

            Map<String, Object> memberTripLite = new HashMap<>();
            memberTripLite.put("memberTripId", memberTrip.getMemberTripId());
            memberTripLite.put("member", memberLite);

            Map<String, Object> response = new HashMap<>();
            response.put("memberTrip", memberTripLite);
            response.put("amount", balanceRounded.doubleValue()); // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
            response.put("imageName", "Refundmember");
            response.put("qrcode", qrbase64);

            return new ResponseEntity<>(response, HttpStatus.OK);

        } catch (Exception e) {
            return new ResponseEntity<>("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @PostMapping(value = "/upload-refund-slip", consumes = {"multipart/form-data"})
    @Transactional
    public ResponseEntity<?> doRefundPayment(
            @RequestParam("memberTripId") int memberTripId,
            @RequestParam(value = "tripId", required = false) Integer tripId,
            @RequestParam("amount") double amount,
            @RequestParam("slip_image") MultipartFile file
    ) {
        try {
            if (amount <= 0) {
                return new ResponseEntity<>("amount ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0", HttpStatus.BAD_REQUEST);
            }

            // 1) ‡∏î‡∏∂‡∏á MemberTrip ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á tripId (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏∏)
            MemberTrip memberTrip = memberTripRepository.findById(memberTripId)
                    .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MemberTrip"));

            if (tripId != null) {
                if (memberTrip.getTrip() == null ||
                        !Objects.equals(memberTrip.getTrip().getTripId(), tripId)) {
                    return new ResponseEntity<>("MemberTrip ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trip ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", HttpStatus.BAD_REQUEST);
                }
            } else {
                tripId = (memberTrip.getTrip() != null) ? memberTrip.getTrip().getTripId() : null;
            }
            if (tripId == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö tripId ‡∏Ç‡∏≠‡∏á MemberTrip ‡∏ô‡∏µ‡πâ", HttpStatus.BAD_REQUEST);
            }

            // 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Base64 + MIME (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ)
            String contentType = Optional.ofNullable(file.getContentType()).orElse("").toLowerCase();
            if (contentType.contains("heic") || contentType.contains("heif") || contentType.isEmpty()) {
                contentType = "image/jpeg";
            }
            String base64WithPrefix = "data:" + contentType + ";base64," +
                    Base64.getEncoder().encodeToString(file.getBytes());

            // 3) expectedLast4 = 4 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô"
            if (memberTrip.getParticipant() == null ||
                    memberTrip.getParticipant().getPromtpayNumber() == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô", HttpStatus.BAD_REQUEST);
            }
            String expectedLast4 = last4(digitsOnly(memberTrip.getParticipant().getPromtpayNumber()));

            // 4) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ)
            CheckSlipController.SlipCheckResult result = checkSlip.verifySlip(amount, base64WithPrefix, expectedLast4);

            // 5) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå & ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ ‚Äú‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚Äù
            String originalName = StringUtils.cleanPath(Objects.toString(file.getOriginalFilename(), ""));
            String ext = originalName.contains(".") ? originalName.substring(originalName.lastIndexOf('.')) : "";
            String fileName = "refund_" + memberTripId + "_" + System.currentTimeMillis() + ext;

            File saveFile = new File(uploadDir + fileName);
            File parent = saveFile.getParentFile();
            if (parent != null && !parent.exists() && !parent.mkdirs()) {
                throw new RuntimeException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
            }
            try (FileOutputStream fout = new FileOutputStream(saveFile)) {
                fout.write(file.getBytes());
            }

            // 6) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Payment (refund_member ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö) ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            Payment payment = new Payment();
            payment.setMembertrip(memberTrip);
            payment.setPrice(-amount);
            payment.setPaymentStatus("Correct");
            payment.setPaymentDetail("refund_member");
            payment.setPaymentSlip(fileName);
            payment.setDatetimePayment(new Date());
            paymentRepository.save(payment);

            Map<String, Object> response = new HashMap<>();
            response.put("message", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            response.put("paymentId", payment.getPaymentId());
            response.put("memberTripId", memberTripId);
            response.put("amount", amount);
            response.put("priceSaved", payment.getPrice());
            response.put("paymentStatus", payment.getPaymentStatus());
            response.put("paymentDetail", payment.getPaymentDetail());
            response.put("slipFile", fileName);

            return new ResponseEntity<>(response, HttpStatus.CREATED);

        } catch (CheckSlipController.SlipCheckException e) {
            return new ResponseEntity<>(e.getMessage(), e.status);
        } catch (Exception e) {
            return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ: " + e.getMessage(),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }



    /**
     * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô = ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å MemberTrip ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "participant" ‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ
     * ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Payment ‡∏ó‡∏µ‡πà paymentDetail = "refund_member" ‡πÅ‡∏•‡∏∞ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) paymentStatus = "Correct" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
     * (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö owner)
     */
    private boolean isAllParticipantRefunded(Integer tripId) {
        // ‡∏î‡∏∂‡∏á MemberTrip ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ
        List<MemberTrip> memberTrips = memberTripRepository.findByTrip_TripId(tripId);
        if (memberTrips == null || memberTrips.isEmpty()) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏¢‡∏≤‡∏¢ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ return false ‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢)
            return true;
        }

        for (MemberTrip mt : memberTrips) {
            // ‡∏Ç‡πâ‡∏≤‡∏° owner
            String status = (mt.getMemberTripStatus() == null) ? "" : mt.getMemberTripStatus().trim();
            if (!status.equalsIgnoreCase("participant")) {
                continue;
            }

            // ‡∏´‡∏≤ payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô refund_member ‡πÅ‡∏•‡∏∞ Correct
            boolean hasRefund =
                    mt.getPayments() != null &&
                            mt.getPayments().stream().anyMatch(p ->
                                    p != null &&
                                            "refund_member".equalsIgnoreCase(p.getPaymentDetail()) &&
                                            "Correct".equalsIgnoreCase(p.getPaymentStatus())
                            );

            if (!hasRefund) {
                return false; // ‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô -> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
            }
        }
        return true; // ‡∏ó‡∏∏‡∏Å participant ‡∏°‡∏µ refund_member ‡πÅ‡∏•‡πâ‡∏ß
    }


    @PostMapping("/view")
    @Transactional(readOnly = true)
    public ResponseEntity<?> getViewRefund(@RequestBody Map<String, Object> request) {
        try {
            // 1) ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å body
            Object tripIdRaw = request.get("tripId");
            Object emailRaw = request.get("email");

            if (tripIdRaw == null || emailRaw == null || String.valueOf(emailRaw).trim().isEmpty()) {
                return new ResponseEntity<>("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á tripId ‡πÅ‡∏•‡∏∞ email", HttpStatus.BAD_REQUEST);
            }

            Integer tripId;
            try {
                tripId = (tripIdRaw instanceof Number)
                        ? ((Number) tripIdRaw).intValue()
                        : Integer.parseInt(String.valueOf(tripIdRaw));
            } catch (NumberFormatException e) {
                return new ResponseEntity<>("tripId ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", HttpStatus.BAD_REQUEST);
            }
            String email = String.valueOf(emailRaw).trim();

            // 2) ‡∏´‡∏≤ MemberTrip
            MemberTrip memberTrip = memberTripRepository
                    .findFirstByTrip_TripIdAndParticipant_Email(tripId, email)
                    .orElseThrow(() -> new RuntimeException(
                            "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ tripId=" + tripId + " email=" + email));

            // 3) ‡∏´‡∏≤ Payment refund_member ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            Payment refundPayment = null;
            if (memberTrip.getPayments() != null && !memberTrip.getPayments().isEmpty()) {
                refundPayment = memberTrip.getPayments().stream()
                        .filter(p -> p != null && "refund_member".equalsIgnoreCase(p.getPaymentDetail()))
                        .sorted((p1, p2) -> {
                            Date d1 = p1.getDatetimePayment();
                            Date d2 = p2.getDatetimePayment();
                            if (d1 != null && d2 != null) {
                                return d2.compareTo(d1);
                            } else if (d1 != null) {
                                return -1;
                            } else if (d2 != null) {
                                return 1;
                            }
                            return Integer.compare(
                                    p2.getPaymentId() != null ? p2.getPaymentId() : 0,
                                    p1.getPaymentId() != null ? p1.getPaymentId() : 0
                            );
                        })
                        .findFirst()
                        .orElse(null);
            }

            // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            Map<String, Object> memberLite = new HashMap<>();
            if (memberTrip.getParticipant() != null) {
                Member m = memberTrip.getParticipant();
                memberLite.put("email", m.getEmail());
                memberLite.put("username", m.getUsername());
                memberLite.put("member_image", m.getMember_image());
                memberLite.put("firstName", m.getFirstName());
                memberLite.put("lastName", m.getLastName());
                memberLite.put("promtpayNumber", m.getPromtpayNumber());
                memberLite.put("tel", m.getTel());
            }

            Map<String, Object> memberTripLite = new HashMap<>();
            memberTripLite.put("memberTripId", memberTrip.getMemberTripId());
            memberTripLite.put("participant", memberLite);

            Map<String, Object> paymentJson = null;
            if (refundPayment != null) {
                paymentJson = new HashMap<>();
                paymentJson.put("paymentId", refundPayment.getPaymentId());
                paymentJson.put("paymentStatus", refundPayment.getPaymentStatus());
                paymentJson.put("price", refundPayment.getPrice());
                paymentJson.put("paymentDetail", refundPayment.getPaymentDetail());
                paymentJson.put("paymentSlip", refundPayment.getPaymentSlip());
                paymentJson.put("datetimePayment", refundPayment.getDatetimePayment());
            }

            Map<String, Object> response = new HashMap<>();
            response.put("memberTrip", memberTripLite);
            response.put("payment", paymentJson);

            return new ResponseEntity<>(response, HttpStatus.OK);

        } catch (RuntimeException ex) {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: " + e.getMessage(),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    private static String digitsOnly(String s) {
        return (s == null) ? "" : s.replaceAll("\\D", "");
    }

    private static String last4(String digitsOnly) {
        if (digitsOnly == null) return "";
        int n = digitsOnly.length();
        return (n >= 4) ? digitsOnly.substring(n - 4) : "";
    }

    /**
     * ‡∏î‡∏∂‡∏á "‡πÄ‡∏•‡∏Ç 4 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á" ‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ X/x/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
     * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏•‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö 4 ‡∏ï‡∏±‡∏ß
     * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
     *  - "09xxxx0700"    -> "0700"
     *  - "XXX-X-XX924-3" -> "4923" (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ digits ‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢: 3,2,9,4 ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 4923)
     *  - "+66-xxx-xxx-0700" -> "0700"
     */
    private static String last4FromId(String any) {
        if (any == null || any.isEmpty()) return "";
        StringBuilder acc = new StringBuilder(4);
        for (int i = any.length() - 1; i >= 0; i--) {
            char c = any.charAt(i);
            if (c >= '0' && c <= '9') {
                acc.append(c);
                if (acc.length() == 4) break;
            }
        }
        if (acc.length() < 4) return "";
        return acc.reverse().toString();
    }
}
