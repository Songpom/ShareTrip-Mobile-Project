package com.finalproject.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.finalproject.dto.ActivitySummaryDTO;
import com.finalproject.dto.MemberTripBalanceDTO;
import com.finalproject.model.*;
import com.finalproject.repository.MemberTripRepository;
import com.finalproject.repository.MemberTripActivityRepository;
import com.finalproject.repository.PaymentRepository;
import com.finalproject.service.TripService;
import com.github.pheerathach.ThaiQRPromptPay;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Controller
@RequestMapping("/expend")
public class ExpendController {

    @Autowired
    private MemberTripRepository memberTripRepository;

    @Autowired
    private TripService tripService;

    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private MemberTripActivityRepository memberTripActivityRepository;
    @Autowired
    private CheckSlipController checkSlip;

    private final String uploadDir = "C:/Users/HP/eclipse-workspace/FinalProject/src/main/java/com/finalproject/assets/"; // üìÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì


    private static final long WINDOW_MINUTES = 15L; // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏ô‡∏∏‡πÇ‡∏•‡∏°‡∏à‡∏£‡∏¥‡∏á
    private static final long SKEW_MINUTES   = 5L;  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ clock skew ‡πÅ‡∏Ñ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (2‚Äì5 ‡∏ô‡∏≤‡∏ó‡∏µ)
    private static final ZoneId ZONE_TH = ZoneId.of("Asia/Bangkok");





    // DTO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ MemberTrip



    // Endpoint ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MemberTrip ‡∏ï‡∏≤‡∏° memberTripId
    @GetMapping("/balance/{memberTripId}")
    @ResponseBody
    public Double calculateExpendBalance(@PathVariable Integer memberTripId) {
        try {
            if (memberTripId == null) {
                throw new IllegalArgumentException("memberTripId ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null");
            }

            Optional<MemberTrip> memberTripOpt = memberTripRepository.findById(memberTripId);
            if (!memberTripOpt.isPresent()) {
                throw new RuntimeException("MemberTrip ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: " + memberTripId);
            }

            MemberTrip memberTrip = memberTripOpt.get();

            double totalPayment = (memberTrip.getPayments() != null)
                    ? memberTrip.getPayments().stream()
                    .filter(payment -> payment != null && payment.getPrice() != null)
                    .mapToDouble(Payment::getPrice)
                    .sum()
                    : 0.0;

            List<MemberTripActivity> activities = memberTripActivityRepository.findByMemberTripId(memberTripId);
            double totalPricePerPerson = (activities != null)
                    ? activities.stream()
                    .filter(activity -> activity != null && activity.getPricePerPerson() != null)
                    .mapToDouble(MemberTripActivity::getPricePerPerson)
                    .sum()
                    : 0.0;

            double balance = totalPayment - totalPricePerPerson;

            return balance;

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: " + e.getMessage());
        }
    }

    // Endpoint ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å MemberTrip
    @GetMapping("/all-balances")
    @ResponseBody
    public Double[] getAllMemberTripBalances() {
        try {
            List<MemberTrip> memberTrips = memberTripRepository.findAll();
            return memberTrips.stream()
                    .mapToDouble(memberTrip -> {
                        try {
                            double totalPayment = (memberTrip.getPayments() != null)
                                    ? memberTrip.getPayments().stream()
                                    .filter(payment -> payment != null && payment.getPrice() != null)
                                    .mapToDouble(Payment::getPrice)
                                    .sum()
                                    : 0.0;

                            List<MemberTripActivity> activities = memberTripActivityRepository.findByMemberTripId(memberTrip.getMemberTripId());
                            double totalPricePerPerson = (activities != null)
                                    ? activities.stream()
                                    .filter(activity -> activity != null && activity.getPricePerPerson() != null)
                                    .mapToDouble(MemberTripActivity::getPricePerPerson)
                                    .sum()
                                    : 0.0;

                            return totalPayment - totalPricePerPerson;
                        } catch (Exception e) {
                            System.err.println("Error calculating balance for MemberTrip ID: " +
                                    (memberTrip.getMemberTripId() != null ? memberTrip.getMemberTripId() : "unknown") +
                                    " - " + e.getMessage());
                            return 0.0;
                        }
                    })
                    .boxed()
                    .toArray(Double[]::new);
        } catch (Exception e) {
            throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: " + e.getMessage());
        }
    }

    @GetMapping("/member-trips-balances/{tripId}")
    @ResponseBody
    public List<MemberTripBalanceDTO> getListExpend(@PathVariable Integer tripId) {
        try {
            if (tripId == null) {
                throw new IllegalArgumentException("tripId ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null");
            }

            List<MemberTrip> memberTrips = memberTripRepository.findByTrip_TripId(tripId);
            if (memberTrips == null || memberTrips.isEmpty()) {
                throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö MemberTrip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Trip ID: " + tripId);
            }

            List<MemberTripBalanceDTO> balances = new ArrayList<>();
            for (MemberTrip memberTrip : memberTrips) {
                try {
                    balances.add(validateExpend(memberTrip));
                } catch (Exception e) {
                    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á DTO ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏•‡πâ‡∏°)
                    balances.add(new MemberTripBalanceDTO(
                            null, null, 0.0, 0.0, 0.0, new ArrayList<>()
                    ));
                }
            }
            return balances;

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: " + e.getMessage());
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1 ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏£‡∏¥‡∏õ:
     * - totalPayment: ‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Payment ‡∏ó‡∏µ‡πà status = "Correct"
     * - totalPricePerPerson: ‡∏£‡∏ß‡∏° pricePerPerson ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô MemberTripActivity
     * - balance = totalPayment - totalPricePerPerson
     * - extraPaymentStatus: ‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á payment ‡∏ó‡∏µ‡πà paymentDetail = "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
     * - unpaidExtraAmount: ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≠‡∏á "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á pending
     */
    private MemberTripBalanceDTO validateExpend(MemberTrip memberTrip) {
        Integer memberTripId = memberTrip.getMemberTripId();
        Member member = memberTrip.getParticipant();

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null payments
        List<Payment> payments = (memberTrip.getPayments() != null)
                ? memberTrip.getPayments()
                : Collections.emptyList();

        double totalPayment = payments.stream()
                .filter(p -> p != null
                        && p.getPrice() != null
                        && "Correct".equalsIgnoreCase(p.getPaymentStatus()))
                .mapToDouble(Payment::getPrice)
                .sum();

        // ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        List<MemberTripActivity> activities =
                memberTripActivityRepository.findByMemberTripId(memberTripId);

        double totalPricePerPerson = (activities != null)
                ? activities.stream()
                .filter(a -> a != null && a.getPricePerPerson() != null)
                .mapToDouble(MemberTripActivity::getPricePerPerson)
                .sum()
                : 0.0;

        double balance = totalPayment - totalPricePerPerson;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        List<ActivitySummaryDTO> activityDetails = new ArrayList<>();
        if (activities != null) {
            for (MemberTripActivity mta : activities) {
                if (mta != null && mta.getActivity() != null) {
                    activityDetails.add(new ActivitySummaryDTO(
                            mta.getActivity().getActivityId(),
                            mta.getActivity().getActivityName(),
                            mta.getPricePerPerson(),
                            mta.getActivity().getActivityDateTime()
                    ));
                }
            }
        }

        // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        List<Payment> extraPayments = payments.stream()
                .filter(p -> p != null && "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°".equals(p.getPaymentDetail()))
                .toList();

        // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á extra payment
        String extraStatus = extraPayments.stream()
                .anyMatch(p -> "pending".equalsIgnoreCase(p.getPaymentStatus()))
                ? "pending"
                : "complete";

        // ‚úÖ ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢ (sum ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pending)
        double unpaidExtraAmount = extraPayments.stream()
                .filter(p -> "pending".equalsIgnoreCase(p.getPaymentStatus()) && p.getPrice() != null)
                .mapToDouble(Payment::getPrice)
                .sum();

        // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö DTO ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        MemberTripBalanceDTO dto = new MemberTripBalanceDTO(
                memberTripId.longValue(),
                member,
                totalPayment,
                totalPricePerPerson,
                balance,
                activityDetails
        );
        dto.setExtraPaymentStatus(extraStatus);
        dto.setUnpaidExtraAmount(unpaidExtraAmount);

        return dto;
    }


    @PostMapping("/request-payment-extra")
    @ResponseBody
    public String doRequestExtraPayment(@RequestBody Map<String, Object> request) {
        try {
            // ‡∏î‡∏∂‡∏á tripId
            Integer tripId = null;
            Object tripIdObj = request.get("tripId");
            if (tripIdObj instanceof Integer) {
                tripId = (Integer) tripIdObj;
            } else if (tripIdObj instanceof Number) {
                tripId = ((Number) tripIdObj).intValue();
            }
            if (tripId == null) {
                return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á tripId ‡∏î‡πâ‡∏ß‡∏¢";
            }

            // ‡∏î‡∏∂‡∏á payments list
            Object paymentsObj = request.get("payments");
            if (!(paymentsObj instanceof List)) {
                return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payments ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
            }
            List<?> paymentsList = (List<?>) paymentsObj;
            if (paymentsList.isEmpty()) {
                return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payments ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤";
            }

            for (Object paymentObj : paymentsList) {
                if (!(paymentObj instanceof Map)) continue;

                Map<?, ?> paymentMap = (Map<?, ?>) paymentObj;
                Object memberTripIdObj = paymentMap.get("memberTripId");
                Object amountObj = paymentMap.get("amount");

                if (memberTripIdObj == null || amountObj == null) continue;

                Long memberTripId = null;
                Double amount = null;

                try {
                    if (memberTripIdObj instanceof Number) {
                        memberTripId = ((Number) memberTripIdObj).longValue();
                    } else {
                        memberTripId = Long.parseLong(memberTripIdObj.toString());
                    }
                    if (amountObj instanceof Number) {
                        amount = ((Number) amountObj).doubleValue();
                    } else {
                        amount = Double.parseDouble(amountObj.toString());
                    }
                } catch (Exception e) {
                    continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                }

                if (amount == null || amount <= 0) continue;

                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ memberTripIdFinal ‡πÄ‡∏õ‡πá‡∏ô final ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô lambda
                final Long memberTripIdFinal = memberTripId;

                MemberTrip memberTrip = memberTripRepository.findById(memberTripIdFinal.intValue())
                        .orElseThrow(() -> new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö MemberTrip ID: " + memberTripIdFinal));

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ memberTrip ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô tripId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (!memberTrip.getTrip().getTripId().equals(tripId)) {
                    throw new RuntimeException("MemberTrip ID: " + memberTripIdFinal + " ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trip ID: " + tripId);
                }

                Payment payment = new Payment();
                payment.setMembertrip(memberTrip);
                payment.setPrice(amount);

                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ memberTripStatus ‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if ("owner".equalsIgnoreCase(memberTrip.getMemberTripStatus())) {
                    payment.setPaymentStatus("Correct");
                } else {
                    payment.setPaymentStatus("pending");
                }

                payment.setPaymentDetail("‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°");
                payment.setPaymentSlip(null);
                payment.setDatetimePayment(null);

                if (memberTrip.getPayments() == null) {
                    memberTrip.setPayments(new ArrayList<>());
                }
                memberTrip.getPayments().add(payment);

                memberTripRepository.save(memberTrip);
            }

            return "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
        } catch (Exception e) {
            e.printStackTrace();
            return "‚Äú‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: " + e.getMessage();
        }
    }



    @PostMapping("/getpaymentextradetail")
    public ResponseEntity<?> getExpendDetail(@RequestBody Map<String, String> request) {
        try {
            int memberTripId = Integer.parseInt(request.get("memberTripId"));
            int tripId = Integer.parseInt(request.get("tripId"));

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MemberTrip ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
            Optional<MemberTrip> optionalMemberTrip = memberTripRepository.findById(memberTripId);
            if (optionalMemberTrip.isEmpty()) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MemberTrip", HttpStatus.NOT_FOUND);
            }

            MemberTrip memberTrip = optionalMemberTrip.get();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ memberTrip ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô trip ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö tripId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (memberTrip.getTrip() == null || memberTrip.getTrip().getTripId() != tripId) {
                return new ResponseEntity<>("MemberTrip ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trip ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", HttpStatus.BAD_REQUEST);
            }

            Trip trip = memberTrip.getTrip(); // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å memberTrip ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á query ‡πÉ‡∏´‡∏°‡πà

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ owner ‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ
            MemberTrip ownerTrip = trip.getMemberTrips().stream()
                    .filter(mt -> "owner".equalsIgnoreCase(mt.getMemberTripStatus()))
                    .findFirst()
                    .orElse(null);

            if (ownerTrip == null || ownerTrip.getParticipant() == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ", HttpStatus.NOT_FOUND);
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Payment
            List<Payment> pendingPayments = paymentRepository.findByMembertrip_MemberTripIdAndPaymentDetailAndPaymentStatus(
                    memberTripId, "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "pending"
            );

            double totalPendingAmount = pendingPayments.stream()
                    .mapToDouble(Payment::getPrice)
                    .sum();

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á ‡∏Å‡πá‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if (totalPendingAmount <= 0) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà", HttpStatus.OK);
            }

            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° response
            Map<String, Object> response = new HashMap<>();
            trip.setMemberTrips(null);
            trip.setActivity(null);
            response.put("trip", trip);
            response.put("amount", totalPendingAmount); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ frontend ‡∏î‡πâ‡∏ß‡∏¢

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÇ‡∏Ñ‡πâ‡∏î
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å DB
            String raw = ownerTrip.getParticipant().getPromtpayNumber();
            String digits = raw.replaceAll("\\D", ""); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

// ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            if (!digits.matches("^\\d{13}$") && !digits.matches("^0\\d{9}$")) {
                return new ResponseEntity<>(
                        "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0XXXXXXXXX ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ 13 ‡∏´‡∏•‡∏±‡∏Å)",
                        HttpStatus.BAD_REQUEST
                );
            }
            String qrbase64;
            BigDecimal amt = BigDecimal
                    .valueOf(totalPendingAmount)
                    .setScale(2, RoundingMode.HALF_UP);
// ‡πÉ‡∏™‡πà‡∏û‡∏£‡πá‡∏≠‡∏Å‡∏ã‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            if (digits.matches("^\\d{13}$")) {
                ThaiQRPromptPay qr = new ThaiQRPromptPay.Builder().staticQR().creditTransfer().nationalId(digits).amount(new BigDecimal(amt.doubleValue())).build();
                qrbase64 = qr.drawToBase64(300, 300);// ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
                // ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
            } else {
                ThaiQRPromptPay qr = new ThaiQRPromptPay.Builder().staticQR().creditTransfer().mobileNumber(digits).amount(new BigDecimal(amt.doubleValue())).build();
                qrbase64 = qr.drawToBase64(300, 300);// ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
            }

            response.put("qrcode", qrbase64);

            return new ResponseEntity<>(response, HttpStatus.OK);

        } catch (Exception e) {
            return new ResponseEntity<>("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @PostMapping(value = "/uploadextraslippayment", consumes = {"multipart/form-data"})
    @Transactional
    public ResponseEntity<?> doPaymentExpend(
            @RequestParam("memberTripId") int memberTripId,
            @RequestParam("tripId") int tripId,
            @RequestParam("amount") double amount,
            @RequestParam("slip_image") MultipartFile file
    ) {
        try {
            Optional<MemberTrip> optionalMemberTrip = memberTripRepository.findById(memberTripId);
            if (optionalMemberTrip.isEmpty()) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MemberTrip", HttpStatus.NOT_FOUND);
            }
            MemberTrip memberTrip = optionalMemberTrip.get();

            if (memberTrip.getTrip() == null || memberTrip.getTrip().getTripId() != tripId) {
                return new ResponseEntity<>("MemberTrip ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trip ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", HttpStatus.BAD_REQUEST);
            }

            // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Base64 + MIME (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ)
            String contentType = Optional.ofNullable(file.getContentType()).orElse("").toLowerCase();
            if (contentType.contains("heic") || contentType.contains("heif") || contentType.isEmpty()) {
                contentType = "image/jpeg";
            }
            String base64WithPrefix = "data:" + contentType + ";base64," +
                    Base64.getEncoder().encodeToString(file.getBytes());

            // ‚úÖ expectedLast4 = ‡∏Ç‡∏≠‡∏á owner
            MemberTrip ownerTrip = memberTrip.getTrip().getMemberTrips().stream()
                    .filter(mt -> "owner".equalsIgnoreCase(mt.getMemberTripStatus()))
                    .findFirst().orElse(null);
            if (ownerTrip == null || ownerTrip.getParticipant() == null
                    || ownerTrip.getParticipant().getPromtpayNumber() == null) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á", HttpStatus.BAD_REQUEST);
            }
            String expectedLast4 = last4(digitsOnly(ownerTrip.getParticipant().getPromtpayNumber()));

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ)
            CheckSlipController.SlipCheckResult result = checkSlip.verifySlip(amount, base64WithPrefix, expectedLast4);

            // ‚úÖ ‡∏î‡∏∂‡∏á payment pending
            List<Payment> pendingPayments = paymentRepository
                    .findByMembertrip_MemberTripIdAndPaymentDetailAndPaymentStatus(
                            memberTripId, "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "pending");
            if (pendingPayments.isEmpty()) {
                return new ResponseEntity<>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞", HttpStatus.BAD_REQUEST);
            }

            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå & ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ ‚Äú‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚Äù
            String originalName = StringUtils.cleanPath(Objects.toString(file.getOriginalFilename(), ""));
            String ext = originalName.contains(".") ? originalName.substring(originalName.lastIndexOf('.')) : "";
            String fileName = "expend_" + tripId + "_" + System.currentTimeMillis() + ext;

            File folder = new File(uploadDir);
            if (!folder.exists() && !folder.mkdirs()) {
                throw new RuntimeException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
            }
            File saveFile = new File(uploadDir + fileName);
            try (FileOutputStream fout = new FileOutputStream(saveFile)) {
                fout.write(file.getBytes());
            }

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï payment ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            for (Payment payment : pendingPayments) {
                payment.setPaymentStatus("Correct");
                payment.setPaymentSlip(fileName);
                payment.setDatetimePayment(new Date());
                paymentRepository.save(payment);
            }

            return new ResponseEntity<>("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", HttpStatus.OK);

        } catch (CheckSlipController.SlipCheckException e) {
            return new ResponseEntity<>(e.getMessage(), e.status);
        } catch (Exception e) {
            return new ResponseEntity<>("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + e.getMessage(),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    // ---------- Helpers ----------
    private static String digitsOnly(String s) {
        return (s == null) ? "" : s.replaceAll("\\D", "");
    }

    private static String last4(String digitsOnly) {
        if (digitsOnly == null) return "";
        int n = digitsOnly.length();
        return (n >= 4) ? digitsOnly.substring(n - 4) : "";
    }

    /**
     * ‡∏î‡∏∂‡∏á "‡πÄ‡∏•‡∏Ç 4 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á" ‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ X/x/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
     * ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏•‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö 4 ‡∏ï‡∏±‡∏ß
     * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
     *  - "09xxxx0700"    -> "0700"
     *  - "XXX-X-XX924-3" -> "4923" (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ digits ‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢: 3,2,9,4 ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 4923)
     *  - "+66-xxx-xxx-0700" -> "0700"
     */
    private static String last4FromId(String any) {
        if (any == null || any.isEmpty()) return "";
        StringBuilder acc = new StringBuilder(4);
        for (int i = any.length() - 1; i >= 0; i--) {
            char c = any.charAt(i);
            if (c >= '0' && c <= '9') {
                acc.append(c);
                if (acc.length() == 4) break;
            }
        }
        if (acc.length() < 4) return "";
        return acc.reverse().toString();
    }








}